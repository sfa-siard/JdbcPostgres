/*======================================================================
PostgresStatement implements a wrapped Postgres Statement.
Application : SIARD2
Description : PostgresStatement implements a wrapped Postgres Statement.
Platform    : Java 8-10   
------------------------------------------------------------------------
Copyright  : 2019, Swiss Federal Archives, Berne, Switzerland
License    : CDDL 1.0
Created    : 25.07.2019, Hartwig Thomas, Enter AG, RÃ¼ti ZH, Switzerland
======================================================================*/
package ch.admin.bar.siard2.jdbc;

import java.sql.*;
import ch.enterag.utils.jdbc.*;

/*====================================================================*/
/** PostgresStatement implements a wrapped Postgres Statement.
 * @author Hartwig Thomas
 */
public class PostgresStatement
  extends BaseStatement
  implements Statement
{
  protected Connection _conn;
  private long _lParse = -1;
  private long _lExecute = -1;
  
  /*------------------------------------------------------------------*/
  /** constructor
   * @param stmtWrapped statement to be wrapped.
   * @param conn wrapped connection.
   */
  public PostgresStatement(Statement stmtWrapped, Connection conn)
    throws SQLException
  {
    super(stmtWrapped);
    _conn = conn;
  } /* constructor */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public Connection getConnection() 
    throws SQLException
  {
    return _conn;
  } /* getConnection */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc}
   * Return PostgresResultSet. 
   */
  @Override
  public ResultSet executeQuery(String sql) throws SQLException
  {
    ResultSet rs = null;
    _lParse = System.currentTimeMillis();
    String sNative = getConnection().nativeSQL(sql);
    _lExecute = System.currentTimeMillis();
    _lParse = _lExecute - _lParse;
    rs = new PostgresResultSet(super.executeQuery(sNative),this);
    _lExecute = System.currentTimeMillis() - _lExecute;
    // System.out.println(String.valueOf(_lParse)+","+String.valueOf(_lExecute));
    return rs;
  } /* executeQuery */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} 
   */
  @Override
  public int executeUpdate(String sql) throws SQLException
  {
    int iResult = -1;
    String sNative = getConnection().nativeSQL(sql);
    iResult = super.executeUpdate(sNative);
    return iResult;
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc}
   */
  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys)
      throws SQLException
  {
    int iResult = -1;
    String sNative = getConnection().nativeSQL(sql);
    iResult = super.executeUpdate(sNative, autoGeneratedKeys); 
    return iResult;
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} 
   * Convert JdbcSQLException from Postgres into SQLFeatureNotSupportedError.
   */
  @Override
  public int executeUpdate(String sql, int[] columnIndexes)
      throws SQLException
  {
    int iResult = -1;
    String sNative = getConnection().nativeSQL(sql);
    try { iResult = super.executeUpdate(sNative, columnIndexes); }
    catch(SQLException se)
    {
      if ("0A000".equals(se.getSQLState()))
        throw new SQLFeatureNotSupportedException(se.getMessage());
      else
        throw se;
    }
    return iResult;
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} 
   * Convert JdbcSQLException from MSSQL into SQLFeatureNotSupportedError.
   */
  @Override
  public int executeUpdate(String sql, String[] columnNames)
      throws SQLException
  {
    int iResult = -1;
    String sNative = getConnection().nativeSQL(sql);
    iResult = super.executeUpdate(sNative, columnNames); 
    return iResult;
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean execute(String sql) throws SQLException
  {
    boolean bResult = false;
    String sNative = getConnection().nativeSQL(sql);
    bResult = super.execute(sNative);  
    return bResult;
  } /* execute */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean execute(String sql, int autoGeneratedKeys)
      throws SQLException
  {
    boolean bResult = false;
    String sNative = getConnection().nativeSQL(sql);
    bResult = super.execute(sNative, autoGeneratedKeys);  
    return bResult;
  } /* execute */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean execute(String sql, int[] columnIndexes)
      throws SQLException
  {
    boolean bResult = false;
    String sNative = getConnection().nativeSQL(sql);
    try { bResult = super.execute(sNative, columnIndexes); }
    catch(SQLException se)
    {
      if ("0A000".equals(se.getSQLState()))
        throw new SQLFeatureNotSupportedException(se.getMessage());
      else
        throw se;
    }
    return bResult;
  } /* execute */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public boolean execute(String sql, String[] columnNames)
      throws SQLException
  {
    boolean bResult = false;
    String sNative = getConnection().nativeSQL(sql);
    bResult = super.execute(sNative, columnNames);  
    return bResult;
  } /* execute */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc}
   * Return MsSqlResultSet. 
   */
  @Override
  public ResultSet getResultSet() throws SQLException
  {
    PostgresResultSet prs = null;
    ResultSet rs = super.getResultSet();
    if (rs != null)
      prs = new PostgresResultSet(rs,this);
    return prs;
  } /* getResultSet */

} /* class PostgresStatement */
